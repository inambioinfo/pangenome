cmdhistory=["(list-files \\"G\:\\\\Development\\\\pangenome-files\\")" "(list-files \\"G\:/Development/pangenome-files\\")" "(fs/list-files \\"G\:/Development/pangenome-files\\")" "(fs/list-files \\"G\:/Development/pangenome-files\\" \#\\"fasta\\")" "(fs/find-files \\"G\:/Development/pangenome-files\\" \#\\"fasta\\")" "(fs/find-files \\"G\:/Development/pangenome-files\\" \#\\"\\")" "(fs/find-files \\"G\:/Development/pangenome-files\\" \#\\".*\\")" "(defn list-files [dir]\\r\\n  (fs/find-files dir \#\\".*\\\\.fa(sta)?\\"))" "(list-files \\"G\:/Development/pangenome-files\\")" "(count (list-files \\"G\:/Development/pangenome-files\\"))" "(list-files \\"G\:/Development/pangenome-files\\")" "(find-size-of-files \\"G\:/Development/pangenome-files\\")" "(list-files \\"G\:/Development/pangenome-files\\")" "(find-size-of-files \\"G\:/Development/pangenome-files\\")" "(def a\\n  (with-open [rdr (clojure.java.io/reader \\"G\:\\\\\\\\Development\\\\\\\\pangenome-files\\\\\\\\USDA1157.pSymB.7605.fasta\\")]\\n    (fasta/parse rdr)))" "(keys a)" "(def a\\n  (with-open [rdr (clojure.java.io/reader \\"G\:\\\\\\\\Development\\\\\\\\pangenome-files\\\\\\\\USDA1157.pSymB.7605.fasta\\")]\\n(let [y (fasta/parse rdr)]\\r\\n          {\:file (.toString x)\\r\\n           \:id (\:header y)\\r\\n           \:size (count (\:seq y))})))" "(def a\\n  (with-open [rdr (clojure.java.io/reader \\"G\:\\\\\\\\Development\\\\\\\\pangenome-files\\\\\\\\USDA1157.pSymB.7605.fasta\\")]\\n(let [y (fasta/parse rdr)]\\r\\n          {\\r\\n           \:id (\:header y)\\r\\n           \:size (count (\:seq y))})))" "a" "(def a\\n  (with-open [rdr (clojure.java.io/reader \\"G\:\\\\\\\\Development\\\\\\\\pangenome-files\\\\\\\\USDA1157.pSymB.7605.fasta\\")]\\n(let [y (fasta/parse rdr)]\\r\\n          {\:a y\\r\\n           \:id (\:header y)\\r\\n           \:size (count (\:seq y))})))" "a" "(find-size-of-files \\"G\:/Development/pangenome-files\\")" "(def a (find-size-of-files \\"G\:/Development/pangenome-files\\"))" "(map keys a)" "(class a)" "(take 1 a)" "(def a (find-size-of-files \\"G\:/Development/pangenome-files\\"))" "a" "(map \:size a)" "(sort-by \:size a)" "(reverse (sort-by \:size a))" "(determine-order-of-files \\"G\:/Development/pangenome-files\\")" "(def a (determine-order-of-files \\"G\:/Development/pangenome-files\\"))" "(take 5 a)" "(process-pangenome \\"Smel\\" \\"G\:/Development/pangenome-files\\")" "(pangenome.mummer/read-nucmer-file \\"out.delta\\")" "(pangenome.mummer/read-nucmer-file \\"out.coords\\")" "(def nc (pangenome.mummer/read-nucmer-file \\"out.coords\\"))" "(def a (read-nucmer-file \\"G\://Development//pangenome-files//out.coords\\"))" "(count a)" "(keys a)" "(first a)" "(count nc)" "(first nc)" "nc" "(count nc)" "(class (first nc))" "(def a (map mummer/convert-to-genomematch nc))" "(first a)" "(def a (map mummer/convert-to-genomematch nc))" "(first a)" "(count a)" "(def b (map hash-map (range (count a)) a))" "(keys b)" "(first b)" "(def b (apply merge (map hash-map (range (count a)) a)))" "(keys b)" "(count (keys b))" "(sort-by \:query_coords b)" "(sort-by \:ref_coords b)" "(keys (sort-by \:ref_coords b))" "(keys (sort-by \:query_coords b))" "(keys (sort-by \:ref_coords b))" "(keys (sort-by \:query_coords b))" "(keys (sort-by (comp \:x \:ref_coords) b))" "(map (comp \:x \:ref_coords) b)" "(map (comp \:ref_coords \:x) b)" "(map (comp \:ref_coords) b)" "(map \:ref_coords b)" "(map \:pctid b)" "(map (comp \:ref_coords val) b)" "(map (comp \:x \:ref_coords val) b)" "(sort-by (comp \:x \:ref_coords val) b)" "(keys (sort-by (comp \:x \:ref_coords val) b))" "(keys (sort-by (comp \:x \:query_coords val) b))" "(count (filter (fn [x] (<\= 90 (\:pctid x))) a))" "a" "(count (filter (fn [x] (<\= 90 (\:pct_id x))) a))" "(get c 282)" "(get c 151)" "(get c 30)" "c" "(get c 151)" "(get c 30)" "(get c 282)" "(map \:ref_length c)" "(map (comp \:ref_length val) c)" "(reduce + (map (comp \:ref_length val) c))" "(reduce + (map (comp \:query_length val) c))" "(reduce + (map (comp \:ref_length val) c))" "(reduce + (map (comp \:query_length val) c))" "contig-sizes" "(map \:file contig-sizes)" "contig-sizes" "(map \:file (flatten contig-sizes))" "(map \:file contig-sizes)" "(some (fn [x] (\= (\:file x) ref-file)) (map \:file contig-sizes))" "(some (fn [x] (\= (\:file x) ref-file)) contig-sizes)" "(any (fn [x] (\= (\:file x) ref-file)) contig-sizes)" "(filter (fn [x] (\= (\:file x) ref-file)) contig-sizes)" "(\:size (filter (fn [x] (\= (\:file x) ref-file)) contig-sizes))" "(\:size (first (filter (fn [x] (\= (\:file x) ref-file)) contig-sizes)))" "(\:size (first (filter (fn [x] (\= (\:file x) query-file)) contig-sizes)))" "query-contig" "(within? initial-contig [1 100])" "initial-contig" "(within? initial-contig (->Interval 1 100))" "initial-contig" "(within? (first (\:blocks initial-contig)) (->Interval 1 100))" "(within? (first (\:blocks initial-contig)) (->Interval 0 100))" "(within? (first (\:blocks initial-contig)) (->Interval 1 100))" "(partition 2 1 (range 10))" "(map first  (partition 2 1 (range 10)))" "(subtract (->Interval 1 1000) (->Interval 5 50))" "initial-contig" "(subtract-from-contig initial-contig (->Interval 5 5000))" "c" "(loop [contig initial-contig\\r\\n       sections-to-remove (map \:query_coords c)]\\r\\n  (if (zero? (count sections-to-remove))\\r\\n    contig\\r\\n    (recur (subtract-from-contig contig (first sections-to-remove))\\r\\n           (rest sections-to-remove))))" "(map \:query_coords c)" "c" "(map (comp \:query_coords val) c)" "(loop [contig initial-contig\\r\\n       sections-to-remove (map (comp \:query_coords val) c)]\\r\\n  (if (zero? (count sections-to-remove))\\r\\n    contig\\r\\n    (recur (subtract-from-contig contig (first sections-to-remove))\\r\\n           (rest sections-to-remove))))" "d" "(map (fn [x] (- (\:y x) (\:x x))) d)" "(remove (fn [x] (>\= 0 (- (\:y x) (\:x x)))) d)" "d" "(map (fn [x] (- (\:y x) (\:x x))) d)" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "d" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "(map (fn [x] (- (\:y x) (\:x x))) d)" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "d" "(map (fn [x] (- (\:y x) (\:x x))) d)" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "(+ (map (fn [x] (- (\:y x) (\:x x))) d))" "(apply + (map (fn [x] (- (\:y x) (\:x x))) d))" "(map (fn [x] (- (\:y x) (\:x x))) d)" "d" "(map (fn [x] (- (\:y x) (\:x x))) d)" "ref-size" "query-size" "(map (comp \:query_coords val) c)" "(map (fn [x] (- (\:y x) (\:x x))) (map (comp \:query_coords val) c))" "(map (comp \:query_coords val) c)" "(order [1 2])" "(sort [1 2])" "d" "(map (comp \:query_coords val) c)" "(apply + (map (fn [x] (- (\:y x) (\:x x))) d))" "d" "(apply + (map (fn [x] (- (\:y x) (\:x x))) d))" "(map (comp \:query_coords val) c)" "(map (fn [x] (- (\:y x) (\:x x))) (map (comp \:query_coords val) c))" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) (map (comp \:query_coords val) c)))" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) (map (comp \:ref_coords val) c)))" "(- query-size (reduce + (map (fn [x] (- (\:y x) (\:x x))) (map (comp \:ref_coords val) c))))" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "d" "(reverse \\n  (sort-by \\n    (fn [x]\\n      (- (\:y x) (\:x x))) c))" "d" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "(take 5 (reduce + (map (fn [x] (- (\:y x) (\:x x))) d)))" "d" "(take 5 d)" "(map (fn [x] (- (\:y x) (\:x x))) d)" "d" "(map (fn [x] (- (\:y x) (\:x x))) d)" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "d" "(reduce + (map (fn [x] (- (\:y x) (\:x x))) d))" "d" "(map (fn [x] (- (\:y x) (\:x x))) d)" "d" "(remove (range 5 100) (range 105))" "(remove (hash-set (range 5 100)) (range 105))" "(remove (apply hash-set (range 5 100)) (range 105))" "(remove \\n  (apply hash-set (range 5 100)) \\n  (range 105))" "d" "c" "(map (comp \:query_coords val) c)" "(map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c)" "(distinct (map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c))" "(count (distinct (map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c)))" "(distinct (map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c))" "(distinct (flatten (map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c)))" "(count (distinct (flatten (map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c))))" "(count (remove (apply hash-set (distinct (flatten (map (comp (fn [x] (range (\:x x) (\:y x))) \:query_coords val) c)))) (range query-size)))" "query-contig" "ref-file" "query-contig" "query-size" "contig-sizes" "query-size" "ref-size" "query-size" "(count d)" "(keys d)" "d" "(count c)" "c" "(frequencies (map \:query_coords c))" "(frequencies (map (comp \:query_coords val) c))" "(sort-by second (frequencies (map (comp \:query_coords val) c)))" "(filter \\n  (fn [x]\\n    (\= (\:query_coords x) {\:x 3066761, \:y 3070690}))\\n  (map val c))" "(map val c)" "(filter \\n  (fn [x]\\n    (\= (\:query_coords x) (->Interval 3066761 3070690)))\\n\\n  (map val c))" "(filter \\n  (fn [x]\\n    (\= (\:query_coords x) (->Interval 3066761 3070690)))\\n  (map val c))" "(sort-by second (frequencies (map (comp \:ref_coords val) c)))" "b" "c" "b" "(count c)" "b" "(count b)" "c" "(count c)" "(sort-by second (frequencies (map (comp \:ref_coords val) c)))" "b" "c" "r-order" "q-order" "(frequencies q-order)" "(sort-by second (frequencies q-order))" "(frequencies q-order)" "(sort-by val (frequencies q-order))" "(map val (frequencies q-order))" "(sort (map val (frequencies q-order)))" "(reverse (sort (map val (frequencies q-order))))" "(reverse (sort (map val (frequencies r-order))))" "q-order" "(partition 2 1 q-order)" "(conj [1 2] 3)" "(conj [[1 2]] [3 4])" "synteny" "(for [ix synteny]\\n  (reduce +\\n          (for [i ix]\\n            (\:query_length (get c i)))))" "(reduce +\\n        (for [ix synteny]\\n          (reduce +\\n                  (for [i ix]\\n                    (\:query_length (get c i))))))" "(filter (fn [x] (>\= (count x) 2)) synteny)" "(reduce +\\n        (for [ix (filter (fn [x] (>\= (count x) 2)) synteny)]\\n          (reduce +\\n                  (for [i ix]\\n                    (\:query_length (get c i))))))" "(reduce +\\n        (for [ix synteny]\\n          (reduce +\\n                  (for [i ix]\\n                    (\:query_length (get c i))))))" "synteny" "        (for [ix synteny]\\n          (reduce +\\n                  (for [i ix]\\n                    (\:query_length (get c i)))))" "synteny" "(intersects? \\n  (->Interval 1 1000)\\n  (->Interval 900 2000))" "(intersects? \\n  (->Interval 1 1000)\\n  (->Interval 1000 2000))" "(intersects? \\n  (->Interval 1 1000)\\n  (->Interval 1001 2000))" "(intersects? \\n  (->Interval 500 1000)\\n  (->Interval 1 499))" "(intersects? \\n  (->Interval 500 1000)\\n  (->Interval 1 505))" "(intersection\\n  (->Interval 500 1000)\\n  (->Interval 1 505))" "(length? (->Interval 5 10))" "(length? (->Interval 10 5))" "abs" "(length? (->Interval 10 5))" "(length? (->Interval 10 10))" "1" "d" "(map length? d)" "(reduce + (map length? d))" "d" "(map length? d)" "(reduce + (map length? d))" "(map length? d)" "d" "(reduce + (map length? d))" "d" "(reduce + (map length? d))" "d" "c" "(filter \\n  (fn [x]\\n    (any\\n      (for [q (map \:query_coords b)]\\n        (intersects? q x))))\\n  d)" "(filter \\n  (fn [x]\\n    (some\\n      (for [q (map \:query_coords b)]\\n        (intersects? q x))))\\n  d)" "(filter \\n  (fn [x]\\n    (some\\n      (fn [y]\\n        (intersects? x y))\\n      (map \:query_coords b)))\\n  d)" "(filter \\n  (fn [x]\\n    (some\\n      (fn [y]\\n        (intersects? x y))\\n      (map \:query_coords b))) d)" "(intersects (->Interval 5 10) (->Interval 1 20))" "(intersects? (->Interval 5 10) (->Interval 1 20))" "(filter \\n  (fn [x]\\n    (some\\n      (fn [y]\\n        (intersects? x y))\\n      (map \:query_coords b))) d)" "(reduce + (map length? (filter \\n                         (fn [x]\\n                           (some\\n                             (fn [y]\\n                               (intersects? x y))\\n                             (map \:query_coords b))) d)))" "(filter \\n  (fn [x]\\n    (some\\n      (fn [y]\\n        (intersects? x y))\\n      (map \:query_coords b))) \\n  d)" "(map length? (filter \\n               (fn [x]\\n                 (some\\n                   (fn [y]\\n                     (intersects? x y))\\n                   (map \:query_coords b))) d))" "(reduce + (map length? (filter \\n                         (fn [x]\\n                           (some\\n                             (fn [y]\\n                               (intersects? x y))\\n                             (map \:query_coords b))) d)))" "d" "(map length? (filter \\n               (fn [x]\\n                 (some\\n                   (fn [y]\\n                     (intersects? x y))\\n                   (map \:query_coords b))) d))" "(map length? d)" "(reduce + (map length? d))" "(map length? d)" "(reduce + (map length? d))" "d" "(map length? d)" "(reduce + (map length? d))" "(map length? d)" "(sort (map length? d))" "(take 5 (sort (map length? d)))" "e" "(reduce + (map length? e))" "e" "(count f)" "f" "(keys f)" "(map keys f)" "(map key f)" "(class f)" "(type f)" "(into {} f)" "(apply merge-with concat f)" "(map key f)" "f" "(map key f)" "(class f)" "f" "(merge-with concat f)" "(apply  merge-with concat f)" "(keys f)" "(count f)" "(count (get f \\"7994\\"))" "(get f \\"7994\\")" "(count (get f \\"7994\\"))" "f" "(count (val f))" "f" "(count (val f))" "(keys f)" "(count (val f))" "(keys f)" "(count (val f))" "(count f)" "(count (get \\"7994\\" f))" "(count (get f  \\"7994\\"))" "(filter\\n  (fn [x]\\n    (let [gi (->Interval (\:start x) (\:end x))]\\n      (some (fn [y] (intersects? y gi)) e)))\\n  (get f \\"7994\\"))" "(count\\n  (filter\\n    (fn [x]\\n      (let [gi (->Interval (\:start x) (\:end x))]\\n        (some (fn [y] (intersects? y gi)) e)))\\n    (get f \\"7994\\")))" "(count (get f \\"7994\\"))" "q-order" "r-order" "q-order" "(map length? d)" "d" "c" "(map (comp length? \:query_coords) c)" "(map (comp length? \:query_coords val) c)" "(map (juxt identity (fn [x] ((comp length? \:query_coords) (get c x)))) q-order)" "b" "synteny" "(reduce +\\n        (for [ix synteny]\\n          (reduce +\\n                  (for [i ix]\\n                    (\:query_length (get c i))))))" "contig-sizes" "(filter \\n  (fn [x] \\n    (and \\n      (\= (\:file x) query-file)\\n      (\= (\:id x) contig)))\\n  contig-sizes)" "GenomeMatch" "gm" "a" "b" "c" "d" "a" "b" "c" "a" "d" "a" "b" "c" "d" "contig-sizes" "h" "g" "d" "(partition 2 1 d)" "(map (fn [[a b]]\\n       (- (\:x b) (\:y a)))\\n       (partition 2 1 d))" "(map (fn [[a b]]\\n       (- (\:x b) (\:y a)))\\n       (partition 2 1 e))" "merge-nearby-intervals" "(defn merge-nearby-intervals\\n  [intervals max-distance-to-merge]\\n  (for [[a b] (partition 2 1 intervals)]\\n    (if \\n      (<\= (- (\:x b) (\:y a)) max-distance-to-merge)\\n        (->Interval (\:x a) (\:y b))\\n        a)))" "defn" "def" "d" "(defn merge-nearby-intervals\\n  [intervals max-distance-to-merge]\\n  (for [[a b] (partition 2 1 intervals)]\\n    (if \\n      (<\= (- (\:x b) (\:y a)) max-distance-to-merge)\\n        (->Interval (\:x a) (\:y b))\\n        a)))" "(merge-nearby-intervals d 500)" "(count d)" "(count (merge-nearby-intervals d 500))" "(count (merge-nearby-intervals (merge-nearby-intervals d 500) 500))" "(def m (fn [x] (merge-nearby-intervals 500 x)))" "(defn merge-nearby-intervals\\n  [max-distance-to-merge intervals]\\n  (for [[a b] (partition 2 1 intervals)]\\n    (if \\n      (<\= (- (\:x b) (\:y a)) max-distance-to-merge)\\n        (->Interval (\:x a) (\:y b))\\n        a)))" "(def m (fn [x] (merge-nearby-intervals 500 x)))" "(m d)" "(count (m d))" "(count (m (m d)))" "(count (m (m (m d))))" "(count (m (m (m (m d)))))" "(count (m (m (m (m (m d))))))" "(partition 2 2 d)" "(count (m (m (m (m (m (m d)))))))" "(count (m (m (m (m (m (m (m d))))))))" "d" "(m d)" "d" "(m d)" "d" "(m d)" "(partition 2 1 d)" "d" "(partition 2 1 d)" "(partition 2 2 d)" "(partition 2 1 d)" "(partition 2 2 d)" "(partition 2 1 d)" "defn" "(defn find-nearby-intervals\\n  [max-distance intervals]\\n  (filter \\n    (fn [x]\\n      (<\= x 500))\\n    (map\\n      (fn [[a b]]\\n        (- (\:x b) (\:y a))\\n        (partition 2 1 d)))))" "(find-nearby-intervals d)" "(find-nearby-intervals 500 d)" "(find-nearby-intervals 500 d)(defn find-nearby-intervals\\n  [max-distance intervals]\\n  (filter \\n    (fn [[a b]]\\n      (<\= (- (\:x b) (\:y a))) max-distance))\\n        (partition 2 1 d))" "(defn find-nearby-intervals\\n  [max-distance intervals]\\n  (filter \\n    (fn [[a b]]\\n      (<\= (- (\:x b) (\:y a))) max-distance))\\n        (partition 2 1 d))" "(find-nearby-intervals 500 d)" "(count (find-nearby-intervals 500 d))" "(defn find-nearby-intervals\\n  [max-distance intervals]\\n  (filter \\n    (fn [[a b]]\\n      (<\= (- (\:x b) (\:y a)) max-distance))\\n        (partition 2 1 d)))" "(count (find-nearby-intervals 500 d))" "(find-nearby-intervals 500 d)" "(find-nearby-intervals 500 (find-nearby-intervals 500 d))" "(count (find-nearby-intervals 500 (find-nearby-intervals 500 d)))" "(count (find-nearby-intervals 500 d))" "h" "(count h)" "d" "(defn find-nearby-intervals\\n  [max-distance intervals]\\n  (filter \\n    (fn [[a b]]\\n      (<\= (- (\:x b) (\:y a)) max-distance))\\n        (partition 2 1 intervals)))" "d" "(find-nearby-intervals 500 d)" "(count (find-nearby-intervals 500 d))" "@de-novo-contig-number" "(swap\! de-novo-contig-number inc)" "@de-novo-contig-number" "(swap\! de-novo-contig-number inc)" "(swap\! de-novo-contig-number 0)" "h" "(count h)" "h" "(count h)" "(take 5 h)" "(count h)" "h" "(take 5 h)" "(ffirst h)" "(group-by first h)" "(count (keys (group-by first h)))" "e" "(hash-map (range (count h)) h)" "(hash-map (range (count e)) e)" "(apply hash-map (range (count e)) e)" "(apply merge (map hash-map (range (count e)) e))" "(def z (fasta/parse \\"../pangenome-files/Ak83.MainChr.7994.fasta\\"))" "(subs \\"Hello there\!\\" 2 4)" "(subs \\"Hello there\!\\" 2 6)" "(subs \\"Hello there\!\\" 2 7)" "(apply merge (map hash-map (range (count e)) e))" "(take 5 h)" "(group-by first h)" "(count (keys h))" "(first h)" "f" "(take 5 novel-intervals)" "(get 5 novel-intervals)" "(get 7 novel-intervals)" "(apply hash-map novel-intervals)" "(hash-map novel-intervals)" "(get (hash-map novel-intervals) 5)" "(apply hash-map novel-intervals)" "(first novel-intervals)" "(into {} novel-intervals)" "(get (into {} novel-intervals) 5)" "(into {} (map reverse novel-intervals))" "(clojure.set/map-invert (into {} (map reverse novel-intervals)))" "(clojure.set/map-invert (into {} novel-intervals))" "(first f)" "(ffirst f)" "(first (get f \\"7994\\"))" "(second (get f \\"7994\\"))" "(take 5 (get f \\"7994\\"))" "(take 1 (drop 5 (get f \\"7994\\")))" "(take 1 (drop 4 (get f \\"7994\\")))" "(def working-with-gene (take 1 (drop 4 (get f \\"7994\\"))))" "(keys working-with-gene)" "(def w (first (drop 4 (get f \\"7994\\"))))" "w" "(keys w)" "(remove \#{\:landmark \:strand \:start \:end \:phase \:type \:source \:id \:score} (keys w))" "(merge-contigs \\"../pangenome-files/SM11.MainChr.8007.fasta\\" \\"8007\\" \\"../pangenome-files/Ak83.MainChr.7994.fasta\\" \\"7994\\" \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(use 'clojure.stacktrace)" "(print-stacktrace 5 *e)" "(print-stack-trace 5 *e)" "(print-stack-trace *e 5)" "(merge-contigs \\"../pangenome-files/SM11.MainChr.8007.fasta\\" \\"8007\\" \\"../pangenome-files/Ak83.MainChr.7994.fasta\\" \\"7994\\" \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 5)" "(merge-contigs \\"../pangenome-files/SM11.MainChr.8007.fasta\\" \\"8007\\" \\"../pangenome-files/Ak83.MainChr.7994.fasta\\" \\"7994\\" \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 10)" "(merge-contigs \\"../pangenome-files/SM11.MainChr.8007.fasta\\" \\"8007\\" \\"../pangenome-files/Ak83.MainChr.7994.fasta\\" \\"7994\\" \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 10)" "(merge-contigs \\"../pangenome-files/SM11.MainChr.8007.fasta\\" \\"8007\\" \\"../pangenome-files/Ak83.MainChr.7994.fasta\\" \\"7994\\" \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 10)" "(print-stack-trace *e 20)" "(print-stack-trace *e 50)" "(def unfiltered-gm (map mummer/convert-to-genomematch (read-nucmer-output \\"out.coords\\")))" "(def filtered-gm   (filter \\n                        (fn [x]\\n                          (<\= 90 (\:pct_id x))) \\n                        unfiltered-gm))" "(def numbered-blocks  (apply\\n                           merge\\n                           (map hash-map\\n                                (range (count filtered-gm))\\n                                filtered-gm)))" "(def r-order (keys (sort-by (comp \:x \:ref_coords   val) numbered-blocks)))" "(def q-order (keys (sort-by (comp \:x \:query_coords val) numbered-blocks)))" "r-order" "q-order" "(def synteny  (loop [p (partition 2 1 q-order)\\n                        temp []\\n                        vals []]\\n                   (if (empty? p)\\n                     vals\\n                       (if (or\\n                             (\= (inc (ffirst p)) (second (first p)))\\n                             (\= (dec (ffirst p)) (second (first p))))\\n                         (recur (rest p)\\n                                (conj temp (ffirst p))\\n                                vals)\\n                         (recur (rest p)\\n                                []\\n                                (conj vals (conj temp (ffirst p))))))))" "(def ref-size (first\\n                   (filter\\n                     (fn [x] \\n                       (and \\n                         (\= (\:file x) ref-file)\\n                         (\= (\:id x) ref-id)))\\n                     contig-sizes)))" "(def contig-sizes (flatten\\n                       (order/find-size-of-contigs \\"../pangenome-files\\")))" "(def re-file \\"../pangenome-files/SM11.MainChr.8007.fasta\\")\\n(def ref-id \\"8007\\")\\n(def query-file \\"../pangenome-files/Ak83.MainChr.7994.fasta\\")\\n(def query-id \\"7994\\")\\n(def query-gff \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(def ref-size (first\\n                   (filter\\n                     (fn [x] \\n                       (and \\n                         (\= (\:file x) ref-file)\\n                         (\= (\:id x) ref-id)))\\n                     contig-sizes)))" "(def ref-file \\"../pangenome-files/SM11.MainChr.8007.fasta\\")\\n(def ref-id \\"8007\\")\\n(def query-file \\"../pangenome-files/Ak83.MainChr.7994.fasta\\")\\n(def query-id \\"7994\\")\\n(def query-gff \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(def ref-size (first\\n                   (filter\\n                     (fn [x] \\n                       (and \\n                         (\= (\:file x) ref-file)\\n                         (\= (\:id x) ref-id)))\\n                     contig-sizes)))" "query-size (first\\n                     (filter\\n                       (fn [x] \\n                         (and \\n                           (\= (\:file x) query-id)\\n                           (\= (\:id x) query-id)))\\n                       contig-sizes))" "(def query-size (first\\n                          (filter\\n                            (fn [x] \\n                              (and \\n                                (\= (\:file x) query-id)\\n                                (\= (\:id x) query-id)))\\n                            contig-sizes)))" "(def         initial-contig (->Contig [(->Interval 1 ref-size)]))" "(def query-contig   (->Contig [(->Interval 1 query-size)]))" "(def novel-sequence (loop [contig (\:blocks query-contig)\\n                              sections-to-remove (reverse\\n                                                   (sort-by\\n                                                     length?\\n                                                     (map \\n                                                       (comp \:query_coords val) \\n                                                       numbered-blocks)))]\\n                         (if (zero? (count sections-to-remove))\\n                           contig\\n                           (recur (subtract-from-contig contig (first sections-to-remove))\\n                                  (rest sections-to-remove)))))" "(\:blocks query-contig)" "query-contig" "query-size" "ref-size" "contig-sizes" "(def ref-file \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\")\\n(def ref-id \\"8007\\")\\n(def query-file \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\")\\n(def query-id \\"7994\\")\\n(def query-gff \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(def ref-size (first\\n                   (filter\\n                     (fn [x] \\n                       (and \\n                         (\= (\:file x) ref-file)\\n                         (\= (\:id x) ref-id)))\\n                     contig-sizes)))" "ref-size" "(def ref-size (\:size\\n                   (first\\n                     (filter\\n                       (fn [x] \\n                         (and \\n                           (\= (\:file x) ref-file)\\n                           (\= (\:id x) ref-id)))\\n                       contig-sizes))))" "ref-size" "(\:size\\n                     (first\\n                       (filter\\n                         (fn [x] \\n                           (and \\n                             (\= (\:file x) query-file)\\n                             (\= (\:id x) query-id)))\\n                         contig-sizes)))" "(def query-size (\:size\\n                     (first\\n                       (filter\\n                         (fn [x] \\n                           (and \\n                             (\= (\:file x) query-file)\\n                             (\= (\:id x) query-id)))\\n                         contig-sizes))))" "(def initial-contig (->Contig [(->Interval 1 ref-size)]))" "initial-contig" "(def query-contig   (->Contig [(->Interval 1 query-size)]))" "(def novel-sequence (loop [contig (\:blocks query-contig)\\n                              sections-to-remove (reverse\\n                                                   (sort-by\\n                                                     length?\\n                                                     (map \\n                                                       (comp \:query_coords val) \\n                                                       numbered-blocks)))]\\n                         (if (zero? (count sections-to-remove))\\n                           contig\\n                           (recur (subtract-from-contig contig (first sections-to-remove))\\n                                  (rest sections-to-remove)))))" "novel-sequence" "(def novel-sequence-filtered (remove \\n                                  (fn [x] (< (length? x) 500)) \\n                                  novel-sequence))" "(def query-genes (get\\n                      (with-open [rdr (clojure.java.io/reader query-gff)]\\n                        (doall\\n                          (group-by \:landmark (gff/parse-reader rdr))))\\n                      query-id))" "(def novel-genes (filter\\n                      identity\\n                      (for [gi novel-sequence-filtered\\n                            gene query-genes]\\n                        (if \\n                          (within? gi (->Interval (\:start gene) (\:end gene)))\\n                          [gi gene]))))" "(def novel-intervals        (apply merge (map hash-map (range (count novel-sequence-filtered)) novel-sequence-filtered)))" "(def novel-intervals-invert (clojure.set/map-invert (into {} novel-intervals)))" "(merge-contigs \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\"8007\\" \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\"7994\\" \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "contig-sizes" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"7994\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 50)" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"7994\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 50)" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"7994\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(print-stack-trace *e 50)" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"7994\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(class (subs \\"Hello there\!\!\!\!\\" 1 4)\\n       )" "(class (subs \\"Hello there\!\!\!\!\\" 1 4))" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"7994\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"7567\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "(def contig-sizes (flatten\\n                       (order/find-size-of-contigs \\"../pangenome-files\\")))" "contig-sizes" "(def contig-sizes (flatten\\n                       (order/find-size-of-contigs \\"../pangenome-files\\")))" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"7567\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\n  \\"8007\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"7565\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "(load-genome \\"ref\\" \\"../pangenome-files/ref-i1.fasta\\")" "(\#{\\"Hello\\"} \\"Hi\\")" "(\#{\\"Hello\\"} \\"Hello\\")" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "dbg" "qg" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "qg" "dbg" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "query-genome" "qg" "dbg" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/KH35c.MainChr.7565.fasta\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "(loop [contigs (\:contigs query-genome)\\n                              sections-to-remove (reverse\\n                                                   (sort-by\\n                                                     length?\\n                                                     (map \\n                                                       (comp \:query_coords val) \\n                                                       numbered-blocks)))]\\n                         (if (zero? (count sections-to-remove))\\n                           contigs\\n                           (recur (subtract-from-contig contigs (first sections-to-remove))\\n                                  (rest sections-to-remove))))" "(loop [contigs (\:contigs qg)\\n                              sections-to-remove (reverse\\n                                                   (sort-by\\n                                                     length?\\n                                                     (map \\n                                                       (comp \:query_coords val) \\n                                                       numbered-blocks)))]\\n                         (if (zero? (count sections-to-remove))\\n                           contigs\\n                           (recur (subtract-from-contig contigs (first sections-to-remove))\\n                                  (rest sections-to-remove))))" "(loop [contigs (\:contigs qg)\\n                              sections-to-remove (reverse\\n                                                   (sort-by\\n                                                     length?\\n                                                     (map \\n                                                       (comp \:query_coords val) \\n                                                       dbg)))]\\n                         (if (zero? (count sections-to-remove))\\n                           contigs\\n                           (recur (subtract-from-contig contigs (first sections-to-remove))\\n                                  (rest sections-to-remove))))" "(loop [contigs (\:contigs qg)\\n       sections-to-remove (reverse\\n                            (sort-by\\n                              length?\\n                              (map \\n                                (comp \:query_coords val) \\n                                dbg)))]\\n  (if (zero? (count sections-to-remove))\\n    contigs\\n    (recur (subtract-from-contig contigs (first sections-to-remove))\\n           (rest sections-to-remove))))" "(subtract-from-contigs [(->Interval \\"7567\\" 1 3500000)] (->Interval \\"7565\\" 5 100))" "(subtract-from-contig [(->Interval \\"7567\\" 1 3500000)] (->Interval \\"7565\\" 5 100))" "(within? [(->Interval \\"7567\\" 1 3500000)] (->Interval \\"7565\\" 5 100))" "(within? [(->Interval \\"7565\\" 1 3500000)] (->Interval \\"7565\\" 5 100))" "(within? (->Interval \\"7565\\" 1 3500000) (->Interval \\"7565\\" 5 100))" "(subtract-from-contig [(->Interval \\"7565\\" 1 3500000)] (->Interval \\"7565\\" 5 100))" "(subtract-from-contig [(->Interval \\"7565\\" 1 3500000)] (->Interval \\"7565\\" 50 100))" "(loop [contigs (\:contigs qg)\\n       sections-to-remove (reverse\\n                            (sort-by\\n                              length?\\n                              (map \\n                                (comp \:query_coords val) \\n                                dbg)))]\\n  (if (zero? (count sections-to-remove))\\n    contigs\\n    (recur (subtract-from-contig contigs (first sections-to-remove))\\n           (rest sections-to-remove))))" "(\:contigs qg)" "dbg" "(loop [contigs (\:contigs qg)\\n       sections-to-remove (reverse\\n                            (sort-by\\n                              length?\\n                              (map \\n                                (comp \:query_coords val) \\n                                dbg)))]\\n  (if (zero? (count sections-to-remove))\\n    contigs\\n    (recur (subtract-from-contig contigs (first sections-to-remove))\\n           (rest sections-to-remove))))" "dbg" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7565.fasta\\" \\n  \\"../pangenome-files/KH35c.MainChr.7565.gff3\\")" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(use 'clojure.stacktrace)" "(print-stack-trace *e 10)" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(range 0 5)" "(merge-contigs \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(merge-genomes\\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"../pangenome-files/SM11.MainChr.8007.gff3\\"\\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\")" "(merge-genomes\\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\" \\n  \\"/home/joseph/msi/work/pangenome/../pangenome-files/Ak83.MainChr.7994.fasta\\" \\n  \\"../pangenome-files/SM11.MainChr.8007.gff3\\"\\n  \\"../pangenome-files/Ak83.MainChr.7994.gff3\\"\\n  \\"pr1\\")" "(partition 2 1 (range 5))" "(process-pangenome)" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(print-stack-trace *e 50)" "(use 'clojure.stacktrace)" "(print-stack-trace *e 50)" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(print-stack-trace *e 50)" "(shell/sh \\"nucmer\\")" "(shell/sh \\"nucmer -p\\")" "(shell/sh \\"nucmer\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(print-stack-trace *e 50)" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(mummer/generate-commands \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(print-stack-trace *e 10)" "(print-stack-trace *e 20)" "(print-stack-trace *e 30)" "(print-stack-trace *e 40)" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "cmds" "(first cmds)" "(shell/sh (first cmds))" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(first cmds)" "(shell/sh (first cmds))" "shell/sh" "(shell/sh \\"nucmer\\" \\"-p out\\" \\"--mum\\")" "(shell/sh \\"nucmer\\" \\"-p\\" \\"out\\" \\"--mum\\")" "(shell/sh \\"nucmer\\" \\"-p\\" \\"out\\" \\"--mum\\" \\"/home/joseph/msi/work/pangenome/../pangenome-files/ref-i1.fasta\\" \\"/home/joseph/msi/work/pangenome/../pangenome-files/SM11.MainChr.8007.fasta\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\")" "(class (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"))" "(class (\:out (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\")))" "(shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\")" "(\:out (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"))" "(println (\:out (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\")))" "(\:out (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"))" "(mummer/read-nucmer-from-string (\:out (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\")))" "(mummer/read-nucmer-from-string (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"))" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(clojure.string/replace \\"blahblah.fasta\\" \#\\"fasta\\" \\"gff3\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(mummer/read-nucmer-from-string (shell/sh \\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"))" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "@merge/de-novo-contig-number" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(union (->Interval 1 50 100) (->Interval 1 25 100))" "(union (->Interval 1 50 100) (->Interval 1 25 105))" "(union (->Interval 1 50 55) (->Interval 1 125 155))" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 450 1000)])" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 1 450 1000)])" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 1 4500 10000)])" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 250 1000)])" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(order-by (comp \:id \:x \:y) [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(sort-by (comp \:id \:x \:y) [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(sort-by (comp \:id \:x) [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(sort-by (comp \:x \:id) [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(map (comp \:x \:id) [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(sort-by \:x [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(sort-by \:x (sort-by \:id [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)]))" "(sort-by \:x (sort-by \:id [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000) (->Interval 5 1 100)]))" "(sort-by \:id (sort-by \:x [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000) (->Interval 5 1 100)]))" "Infinity" "Double/POSITIVE_INFINITY" "(sort-by \:id (sort-by \:x [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000) (->Interval 5 1 100)]))" "(map (comp \:x \:id) [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000)])" "(find-nearby-intervals 500 [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000) (->Interval 5 1 50)])" "(find-nearby-intervals 5 [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000) (->Interval 5 1 50)])" "(find-nearby-intervals 5000 [(->Interval 1 1 50) (->Interval 1 4500 10000) (->Interval 1 250 1000) (->Interval 5 1 50)])" "(cons 1 [1 2 3])" "(conj 1 [1 2 3])" "(conj [1 2 3] 1)" "(conj [1 2 3] [1 2])" "(apply conj [1 2 3] [1 2])" "(apply conj [1 2 3] [1])" "(apply conj [1 2 3] [])" "(merge-nearby-intervals \\n  500\\n  [(->Interval 1 1 50)\\n   (->Interval 1 450 1000)\\n   (->Interval 5 5000 10000)\\n   (->Interval 5 10400 12000)\\n   (->Interval 1 2000 3000)\\n   (->Interval 1 10000 20000)\\n   (->Interval 1 20010 30000)])" "(merge-nearby-intervals \\n  50000\\n  \\n  [(->Interval 1 1 50)\\n   (->Interval 1 450 1000)\\n   (->Interval 5 5000 10000)\\n   (->Interval 5 10400 12000)\\n   (->Interval 1 2000 3000)\\n   (->Interval 1 10000 20000)\\n   (->Interval 1 20010 30000)])" "(merge-nearby-intervals \\n  50\\n  [(->Interval 1 1 50)\\n   (->Interval 1 450 1000)\\n   (->Interval 5 5000 10000)\\n   (->Interval 5 10400 12000)\\n   (->Interval 1 2000 3000)\\n   (->Interval 1 10000 20000)\\n   (->Interval 1 20010 30000)])" "(reduce\\n  merge-and-enlarge\\n  [(->Interval 1 1 100)\\n   (->Interval 1 50 150)\\n   (->Interval 1 120 400)])" "(reduce\\n  merge-and-enlarge\\n  [(->Interval 1 1 100)\\n   (->Interval 1 50 150)\\n   (->Interval 1 120 400)\\n   (->Interval 1 5 10)])" "(reduce\\n  merge-and-enlarge\\n(cons (->Interval 1 1 1000)\\n      [(->Interval 1 1 100)\\n       (->Interval 1 50 150)\\n       (->Interval 1 120 400)\\n       (->Interval 1 5 10)]))" "(process-pangenome \\"Smel\\" \\"../pangenome-files\\")" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(def query-contigs [(->Interval 5 1000)])" "(def query-contigs [(->Interval 5 1000 1)])" "query-contigs" "(def query-contigs [(->Interval 1 5 1000)])" "query-contigs" "(def query-contigs [(->Interval 1 1 10000)])" "query-contigs" "(reduce query-contigs [(->Interval 5 5 50) (->Interval 10 900 10000)])" "(reduce subtract-from-intervals query-contigs [(->Interval 5 5 50) (->Interval 10 900 10000)])" "(defn subtract-from-interval\\n  [blocks q]\\n  (flatten\\n    (for [block blocks]\\n      (cond \\n        (within? block q) (subtract block q)\\n        (intersects? block q) (subtract block (intersection block q))\\n        \:else block))))" "(reduce subtract-from-intervals query-contigs [(->Interval 5 5 50) (->Interval 10 900 10000)])" "(defn subtract-from-intervals\\n  [blocks q]\\n  (flatten\\n    (for [block blocks]\\n      (cond \\n        (within? block q) (subtract block q)\\n        (intersects? block q) (subtract block (intersection block q))\\n        \:else block))))" "(reduce subtract-from-intervals query-contigs [(->Interval 5 5 50) (->Interval 10 900 10000)])" "(reduce + 5 [5 10 50])" "(reduce subtract-from-intervals query-contigs [(->Interval 5 5 50) (->Interval 10 900 10000)])" "(reduce subtract-from-intervals query-contigs [(->Interval 5 5 50) (->Interval 1 900 10000)])" "(reduce subtract-from-intervals query-contigs [(->Interval 1 5 50) (->Interval 1 900 10000)])" "(subtract-from-intervals query-contigs (->Interval 1 5 50))" "(subtract-from-intervals query-contigs (->Interval 1 10 50))" "(reduce subtract-from-intervals query-contigs [(->Interval 1 10 50) (->Interval 1 900 10000)])" "(reduce subtract-from-intervals query-contigs [(->Interval 1 10 50) (->Interval 1 900 1000)])" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr/T073.MainChr.7590.fasta\\")" "(def ref-genome (pfasta/load-genome \\"Reference\\" \\"../pangenome-files-mainchr/T073.MainChr.7590.fasta\\"))" "ref-genome" "(def query-genome (pfasta/load-genome \\"Query\\" \\"../pangenome-files-mainchr/USDA1157.MainChr.7604.fasta\\"))" "query-genome" "(pangenome.mummer/generate-commands \\"../pangenome-files-mainchr/T073.MainChr.7590.fasta\\" \\"../pangenome-files-mainchr/USDA1157.MainChr.7604.fasta\\")" "(mummer/read-nucmer-from-string (apply shell/sh [\\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"]))" "(def results (mummer/read-nucmer-from-string (apply shell/sh [\\"show-coords\\" \\"-cdTH\\" \\"out.delta\\"])))" "(def unfiltered-gm (map mummer/convert-to-genomematch results))" "unfiltered-gm" "(def config {\:pctid 90\\n                \:max-dist-merge 500\\n                \:min-size 500})" "(def filtered-gm   (filter \\n                             (fn [x]\\n                               (<\= (\:pctid config) (\:pct_id x))) \\n                             unfiltered-gm))" "filtered-gm" "(count unfiltered-gm)" "(count filtered-gm)" "numbered-blocks  (number-blocks filtered-gm)" "(def numbered-blocks  (number-blocks filtered-gm))" "(def r-order (keys (sort-by (comp \:x \:ref_coords   val) numbered-blocks)))" "(def q-order (keys (sort-by (comp \:x \:query_coords val) numbered-blocks)))" "(runs-of-synteny q-order)" "(reduce subtract-from-intervals query-contigs [(->Interval 1 10 50) (->Interval 1 900 10000)])" "(reduce subtract-from-intervals query-contigs [(->Interval 1 10 50) (->Interval 1 900 1000)])" "(reduce subtract-from-interval query-contigs [(->Interval 1 10 50) (->Interval 1 900 1000)])" "(defn subtract-from-intervals\\n  [blocks q]\\n  (flatten\\n    (for [block blocks]\\n      (cond \\n        (within? block q) (subtract block q)\\n        (intersects? block q) (subtract block (intersection block q))\\n        \:else block))))" "(reduce subtract-from-interval query-contigs [(->Interval 1 10 50) (->Interval 1 900 1000)])" "(def query-contigs [(->Interval 1 1 100000000)])" "(reduce subtract-from-interval query-contigs [(->Interval 1 10 50) (->Interval 1 900 1000)])" "(reduce subtract-from-interval query-contigs [(->Interval 1 10 50) (->Interval 1 900 1000) (->Interval 1 5000 6000)])" "(into [] (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(into [] (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(apply into [] (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(cons (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(conj (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(apply cons (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(conj (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(apply conj (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)]))" "(sort (apply conj (map \:x [(->Interval 1 10 50) (->Interval 1 500 1000)]) (map \:y [(->Interval 1 10 50) (->Interval 1 500 1000)])))" "(nth 0 [1 2 3 4 5])" "(nth [1 2 3 4 5] 1)" "(nth [1 2 3 4 5] 0)" "(defn split-interval \\n  [i q]\\n  (if\\n    (or\\n      (within? i q)\\n      (intersects? i q))\\n        (let [sorted (sort \\n                       [(\:x i) (\:x q) (\:y i) (\:y q)])\\n              x (fn [y] (nth sorted y))]\\n          [(x 0) (x 1) (x 2) (x 3)])))" "(split-interval (->Interval 1 1 10000) (->Interval 1 500 1500))" "(defn split-interval \\n  [i q]\\n  (if\\n    (or\\n      (within? i q)\\n      (intersects? i q))\\n        (let [sorted (sort \\n                       [(\:x i) (\:x q) (\:y i) (\:y q)])\\n              x (fn [y] (nth sorted y))]\\n          [(->Interval (\:id i) (x 0) (x 1))\\n           (->Interval (\:id i) (x 1) (x 2))\\n           (->Interval (\:id i) (x 2) (x 3))])))" "(split-interval (->Interval 1 1 10000) (->Interval 1 500 1500))" "(defn split-interval \\n  [i q]\\n  (if\\n    (or\\n      (within? i q)\\n      (intersects? i q))\\n        (let [sorted (sort \\n                       [(\:x i) (\:x q) (\:y i) (\:y q)])\\n              x (fn [y] (nth sorted y))]\\n          [(->Interval (\:id i) (x 0) (x 1))\\n           (->Interval (\:id i) (inc (x 1)) (x 2))\\n           (->Interval (\:id i) (inc (x 2)) (x 3))])))" "(split-interval (->Interval 1 1 10000) (->Interval 1 500 1500))" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(use 'clojure.stacktrace)" "(print-stack-trace *e 5)" "(print-stack-trace *e 50)" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(print-stack-trace *e 50)" "(print-stack-trace *e 10)" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(print-stack-trace *e 10)" "(print-stack-trace *e 15)" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(- (inc 3746551) 3749190)" "merge-and-expand" "(merge-and-expand (->Interval 7590 3749190 3759088) (->Interval 7590 3746551 3749235))" "(merge-and-enlarge (->Interval 7590 3749190 3759088) (->Interval 7590 3746551 3749235))" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(filter \\n  (fn [gene]\\n    (intersects?\\n      (->Interval 7590 3749190 3759088)\\n      (->Gene-to-interval gene)))\\n  [{\:start 3746551 \:end 3749235 \:landmark 7590}])" "(reduce merge-and-enlarge (->Interval 7590 3749190 3759088) (map ->Gene-to-interval gene [{\:start 3746551 \:end 3749235 \:landmark 7590}]))" "(reduce merge-and-enlarge (->Interval 7590 3749190 3759088) (map ->Gene-to-interval [{\:start 3746551 \:end 3749235 \:landmark 7590}]))" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(intersects? {\:id 7590, \:x 3749190, \:y 3759088} {\:id 7590, \:x 3743282, \:y 3749791})" "(merge-and-enlarge {\:id 7590, \:x 3749190, \:y 3759088} {\:id 7590, \:x 3743282, \:y 3749791})" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "novel-sequence" "novel-intervals" "(count novel-intervals)" "(count novel-sequence-em)" "(novel-intervals)" "(sort \:id novel-intervals)" "(sort-by \:id novel-intervals)" "novel-sequence-em" "(count novel-sequence-em)" "(drop 27 novel-sequence-em)" "(apply intersects? (drop 27 novel-sequence-em))" "(apply distance (drop 27 novel-sequence-em))" "(apply intersects? (drop 27 novel-sequence-em))" "(apply distance (drop 27 novel-sequence-em))" "(drop 27 novel-sequence-em)" "(apply distance (drop 27 novel-sequence-em))" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(use 'clojure.stacktrace)" "(print-stack-trace *e 10)" "(use 'clojure.stacktrace)" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(defn [a] (intersects? {\:id 7590, \:x 3742945, \:y 3759088} a))" "(defn a [a] (intersects? {\:id 7590, \:x 3742945, \:y 3759088} a))" "(defn a [b] (intersects? {\:id 7590, \:x 3742945, \:y 3759088} b))" "(map a novel-intervals)" "novel-intervals" "novel-sequence-em" "(defn a [b] (intersects? {\:id 7590, \:x 3742945, \:y 3759088} b))" "(map a novel-sequence-em)" "(filter (map a novel-sequence-em))" "{\:transl_table 11, \:strand -, \:locus_tag SMEL_v1_4083, \:start 3742242, \:phase 0, \:type CDS, \:source EMBL, \:note Evidence 4 \: Homologs of previously reported genes of unknown function, \:product conserved protein of unknown function, \:inference ab initio prediction\:AMIGene\:2.0, \:landmark 7590, \:id 7590.8265, \:score ., \:translation MSPASIKSGNTWTLNEAGKLLELISWIGDSYRLIPSRFPPVAVYEALVAPEHMEALVRVEDLTNPRLRSLQRITQNMNENPETSARLQNWNLAPFAYGNPEGSTFFGEETPCLELSGECQTALAVSVTRRETFLSRTDEPPTGLDMRMLKTPVSGRFWDLRAQGVQSSRAKCIELGASLPKDADGILFRPAERPSGTALVVVNGAALGKAVQTVHYRYIWNGRKISQVYSFDEKGRKIEADRLRGDLDVLVA, \:end 3743000, \:db_xref MaGe\:33347420}\\n\#pangenome.intervals.Interval{\:id 7590, \:x 3742945, \:y 3759088}" "(intersetcs? {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "(intersects? {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "novel-sequence-em" "novel-intervals" "novel-sequence-em" "novel-intervals" "novel-sequence-em" "novel-intervals" "novel-sequence-em" "(map a (last novel-sequence-em)\\n     )" "(last novel-sequence-em)" "(map a [(last novel-sequence-em)])" "a" "(intersects? {\:id 7590, \:x 3742945, \:y 3759088} {\:id \\"7590\\", \:x 3742945\\n, \:y 3759088})" "(intersects? {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590, \:x 3742945\\n, \:y 3759088})" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(intersects? {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "(merge-and-expand {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "(merge-and-enlarge {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(filter \\n  (fn [x] (intersects? {\:id 7590 \:x 3742242 \:y 3743000} x))\\n  (map ->Gene-to-interval query-genes))" "(filter \\n  (fn [x] (intersects? {\:id \\"7590\\" \:x 3742242 \:y 3743000} x))\\n  (map ->Gene-to-interval query-genes))" "(maximize-gene-coverage-and-merge 500 query-genes novel-sequence-em)" "(count (maximize-gene-coverage-and-merge 500 query-genes novel-sequence-em))" "count (maximize-gene-coverage-and-merge 500 query-genes novel-sequence-em)" "(maximize-gene-coverage-and-merge 500 query-genes novel-sequence-em)" "(count (maximize-gene-coverage-and-merge 500 query-genes novel-sequence-em))" "(count novel-sequence-em)" "(count (maximize-gene-coverage-and-merge 500 query-genes novel-sequence-em))" "(count novel-sequence-em)" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "query-genes" "novel-intervals" "novel-sequence-filtered" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(intersects? {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "(merge-and-enlarge {\:id 7590, \:x 3742945, \:y 3759088} {\:id 7590 \:x 3742242 \:y 3743000})" "(maximize-gene-coverage-and-merge\\n  500\\n  query-genes\\n  novel-sequence-filtered)" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         novel-sequence-filtered))" "(count novel-sequence-filtered)" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         novel-sequence-filtered))" "(def a (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         novel-sequence-filtered))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         a))" "(def b (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         a))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         b))" "(\= a (maximize-gene-coverage-and-merge\\n       500\\n       query-genes\\n       b))" "(\= b (maximize-gene-coverage-and-merge\\n       500\\n       query-genes\\n       b))" "(\= a (maximize-gene-coverage-and-merge\\n       500\\n       query-genes\\n       b))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         b))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         a))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         novel-sequence-filtered))" "(def a (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         novel-sequence-filtered))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         a))" "(count (maximize-gene-coverage-and-merge\\n         500\\n         query-genes\\n         novel-sequence-filtered))" "(process-pangenome \\"Smel\\" \\"../pangenome-files-mainchr\\")" "(process-pangenome \\"PanRef_0.01\\" \\"../derek-panref/\\")" "(use 'clojure.stacktrace)" "(print-stack-trace *e 20)" "(process-pangenome \\"PanRef_0.01\\" \\"../derek-panref/\\")" "(print-stack-trace *e 20)" "(process-pangenome \\"PanRef_0.01\\" \\"../derek-panref/\\")" "(print-stack-trace *e 20)" "(process-pangenome \\"PanRef_0.01\\" \\"../derek-panref/\\")" "(process-pangenome \\"Rleg\\" \\"../brendan-panref\\")" "1" "(subs \\"ABCDEFG\\" 9 20)" "(subs \\"ABCDEFG\\" 9 200)" "(subs \\"ABCDEFG\\" 92222 200)" "(process-pangenome \\"Rleg\\" \\"../brendan-panref\\")" "(if\\n                      (>\= (\:count (\:seq r)) (\:y i))\\n                      (\:y i)\\n                      (count (\:seq r)))" "(if\\n                      (>\= 900 500)\\n500\\n900)" "(process-pangenome \\"Rleg\\" \\"../brendan-panref\\")"]
eclipse.preferences.version=1
